@page "/classrooms"
@using ClassroomReservationSystem.Components.Services;
@using ClassroomReservationSystem.Components.Models;
@using System.ComponentModel.DataAnnotations;
@inject ClassroomService ClassroomService
@inject UserState UserState
@rendermode InteractiveServer

@if (!UserState.IsAdmin){
    <div class="text-red-600 font-semibold p-4 bg-red-50 border border-red-300 rounded">
        Access Denied: You do not have permission to view this page.
    </div>
}
else
{
    <div class="container mt-5 limited">
        <div class="inside">
        <div class="row justify-content-center">
            <div class="col-md-10">

                <h2 class="text-center mb-4">Classroom List</h2>

                @if (classrooms is null)
                {
                    <p class="text-center">Loading...</p>
                }
                else if (classrooms.Count == 0)
                {
                    <p class="text-center">No classrooms found.</p>
                }
                else
                {
                    <table class="table  table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Room Number</th>
                                <th>Capacity</th>
                                <th>Department</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var room in classrooms)
                            {
                                <tr>
                                    <td>@room.RoomNumber</td>
                                    <td>@room.Capacity</td>
                                    <td>@room.Department</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(room)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

                @if (deleteTarget != null)
                {
                    <div class="alert alert-warning mt-4">
                        <p>Are you sure you want to delete <strong>@deleteTarget.RoomNumber</strong>?</p>
                        <button class="btn btn-danger me-2" @onclick="DeleteConfirmed">Yes, Delete</button>
                        <button class="btn btn-secondary" @onclick="() => deleteTarget = null">Cancel</button>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(statusMessage))
                {
                    <div class="alert alert-info mt-3" role="alert">
                        @statusMessage
                    </div>
                }

            </div>
        </div>
        </div>
    </div>
}


@code{
    private List<Classroom>? classrooms;
    private Classroom? deleteTarget;
    private string? statusMessage;

    protected override async Task OnInitializedAsync()
    {

        await LoadClassroomsAsync();

    }

    private async Task LoadClassroomsAsync()
    {
        classrooms = await ClassroomService.GetAllClassroomsAsync();
    }

   
    private void ConfirmDelete(Classroom classroom)
    {
        deleteTarget = classroom;
    }

    private async Task DeleteConfirmed()
    {
        if (deleteTarget != null)
        {
            bool deleted = await ClassroomService.DeleteClassroomAsync(deleteTarget.ClassroomId);
            if (deleted)
            {
                statusMessage = $"Classroom '{deleteTarget.RoomNumber}' deleted.";
                deleteTarget = null;
                await LoadClassroomsAsync();
            }
            else
            {
                statusMessage = "Failed to delete classroom.";
            }
        }
    }
    private bool _initialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Inside on after render");
        if (firstRender && !_initialized)
        {
            Console.WriteLine("Initialized fun");
            _initialized = true;
            await UserState.InitializeAsync();
            StateHasChanged();

        }
    }
}