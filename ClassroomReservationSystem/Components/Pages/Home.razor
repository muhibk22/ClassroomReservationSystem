@page "/"
@using ClassroomReservationSystem.Components.Services
@using System.ComponentModel.DataAnnotations;
@inject UserService UserService
@inject UserState UserState
@inject NavigationManager Navigation
@rendermode InteractiveServer
<div class="login-page">
    <div class="container d-flex flex-column align-items-center justify-content-center">
        <div class="w-100 text-center title">
            <h2 class="mb-4 ">Classroom Reservation System</h2>
        </div>

        <div class="col-md-5 login-container">
            <h3 class="text-center mb-4">Login</h3>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label class="form-label">Username</label>
                    <InputText class="form-control" @bind-Value="loginModel.UserName" />
                    <ValidationMessage For="@(() => loginModel.UserName)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText class="form-control" @bind-Value="loginModel.Password" type="password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                </div>

                <button class="btn btn-primary w-100" type="submit">Login</button>
            </EditForm>
        </div>
    </div>
</div>


@if (!string.IsNullOrEmpty(message))
{
    <div class="mt-2 alert @(UserState.IsLoggedIn ? "alert-success" : "alert-danger")">
        @message
    </div>
}

@code {
    private User loginModel = new();
    private string message = string.Empty;


    private async Task HandleLogin()
    {
        var user = await UserService.AuthenticateAsync(loginModel.UserName, loginModel.Password);
        if (user != null)
        {
            UserState.SetUserAsync(user);
            if (UserState.IsAdmin)
            {
                message = $"Welcome, {user.FullName}!";
                Navigation.NavigateTo("/register-faculty");

            }
            else
            {
                message = $"Welcome, {user.FullName}!";
                Navigation.NavigateTo("/scheduled-classes");
            }
            Console.WriteLine(UserState.CurrentUser!.FullName);




        }
        else
        {
            message = "Invalid username or password.";
        }

    }

    private bool _initialized = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    
        if (firstRender && !_initialized){
            UserState.LogoutAsync();
            StateHasChanged();

        }
    }
    
}
