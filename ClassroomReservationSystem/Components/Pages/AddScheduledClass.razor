@page "/lecture-scheduling"
@using ClassroomReservationSystem.Components.Services;
@using ClassroomReservationSystem.Components.Models;
@using System.ComponentModel.DataAnnotations;
@using ClassroomReservationSystem.Services

@inject AssignedCourseService AssignedCourseService
@inject UserService UserService
@inject CourseService CourseService
@inject ScheduledClassService ScheduledClassService
@inject NavigationManager NavigationManager
@inject ClassroomService ClassroomService
@inject UserState UserState

@rendermode InteractiveServer

@if (!UserState.IsAdmin)
{
    <div class="text-red-600 font-semibold p-4 bg-red-50 border border-red-300 rounded">
        Access Denied: Only administrators can schedule lectures.
    </div>
}
else
{
    <h3 class="text-xl font-semibold mb-4">Schedule a Lecture</h3>

    <EditForm Model="@scheduledClass" FormName="schedule" OnValidSubmit="HandlValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Assigned Course</label>
            <select class="form-select w-full" @bind="selectedCourseId">
                <option value="">-- Select a Course --</option>
                @foreach (var course in assignedCourses)
                {
                    <option value="@course.AssignedCourseId">
                        @course.Course.CourseCode - @course.Course.Title (@course.Instructor.FullName)
                    </option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label>Classroom</label>
            <select class="form-select w-full" @onchange="OnClassroomChanged">
                <option value="">-- Select a Classroom --</option>
                @foreach (var room in classrooms)
                {
                    <option value="@room.ClassroomId">@room.RoomNumber (@room.Department)</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label>Day of Week</label>
            <select class="form-select w-full" @bind="scheduledClass.Day">
                @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                {
                    <option value="@day">@day</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label>Start Time:</label>
            <select class="form-select" @bind="scheduledClass.StartTime">
                @foreach (var time in TimeOptions)
                {
                    if (time.ToString(@"hh\:mm") == "16:00") { break; }
                    <option value="@time">@time.ToString(@"hh\:mm")</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label>End Time:</label>
            <select class="form-select" @bind="scheduledClass.EndTime">
                @foreach (var time in TimeOptions)
                {
                    if (time.ToString(@"hh\:mm") == "08:00") { continue; }
                    <option value="@time">@time.ToString(@"hh\:mm")</option>
                }
            </select>
        </div>

        @if (!string.IsNullOrEmpty(conflictMessage))
        {
            <div class="text-red-500">@conflictMessage</div>
        }

        <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid)">Submit</button>
    </EditForm>

    <div class="mt-3 alert">
        @message
    </div>
}

@code {
    private List<TimeSpan> TimeOptions = new()
    {
        new TimeSpan(8, 0, 0),
        new TimeSpan(9, 20, 0),
        new TimeSpan(10, 40, 0),
        new TimeSpan(12, 0, 0),
        new TimeSpan(13, 20, 0),
        new TimeSpan(14, 40, 0),
        new TimeSpan(16, 0, 0),
    };

    private ScheduledClass scheduledClass = new()
    {
        Course = new AssignedCourse()
    };

    private List<Classroom> classrooms = new();
    private List<AssignedCourse> assignedCourses = new();
    private int selectedCourseId;
    private string conflictMessage = string.Empty;
    private string message = string.Empty;
    private int selectedClassroomId;

    private bool IsFormValid =>
        selectedCourseId > 0 &&
        scheduledClass.StartTime != TimeSpan.Zero &&
        scheduledClass.EndTime != TimeSpan.Zero &&
        scheduledClass.StartTime < scheduledClass.EndTime;

    private void OnClassroomChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int classroomId))
        {
            selectedClassroomId = classroomId;
            scheduledClass.Classroom = classrooms.FirstOrDefault(c => c.ClassroomId == classroomId)!;
        }
    }

    protected override async Task OnInitializedAsync()
    {    
            assignedCourses = await AssignedCourseService.GetAllAssignedCoursesAsync();
            classrooms = await ClassroomService.GetAllClassroomsAsync();  
    }

    private async Task HandlValidSubmit()
    {
        scheduledClass.Course.AssignedCourseId = selectedCourseId;

        if (scheduledClass.StartTime >= scheduledClass.EndTime)
        {
            message = "Please select valid timings";
            return;
        }

        bool added = await ScheduledClassService.AddScheduledClassAsync(scheduledClass);
        if (added)
        {
            message = "Class Scheduled Successfully!";
        }
        else
        {
            conflictMessage = "Error adding scheduled class. Timeslot already taken";
        }
    }

    private bool _initialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Inside on after render");
        if (firstRender && !_initialized)
        {
            Console.WriteLine("Initialized fun");
            _initialized = true;
            await UserState.InitializeAsync();
            StateHasChanged();
        }
    }
}
