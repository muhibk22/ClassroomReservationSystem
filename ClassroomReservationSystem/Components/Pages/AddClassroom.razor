@page "/add-classroom"
@using ClassroomReservationSystem.Components.Services;
@using ClassroomReservationSystem.Components.Models;
@using System.ComponentModel.DataAnnotations;
@inject ClassroomService ClassroomService
@inject UserState UserState
@rendermode InteractiveServer

@if (!UserState.IsAdmin)
{
    <div class="text-red-600 font-semibold p-4 bg-red-50 border border-red-300 rounded">
        Access Denied: You do not have permission to view this page.
    </div>
}
else
{
    <div class="container mt-5 outline">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h2 class="mb-4 text-center">Add Classroom Record</h2>

                <EditForm Model="newClassroom" OnValidSubmit="AddClassroomAsync" formname="add-classroom-form">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-4">
                        <label class="form-label">Room Number</label>
                        <InputText @bind-Value="newClassroom.RoomNumber" class="form-control" placeholder="Room Number" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Capacity</label>
                        <InputNumber @bind-Value="newClassroom.Capacity" class="form-control" placeholder="Capacity" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Department</label>
                        <InputText @bind-Value="newClassroom.Department" class="form-control" placeholder="Department" />
                    </div>

                    <button type="submit" class="btn btn-primary ">Add Classroom</button>
                </EditForm>

                @if (!string.IsNullOrWhiteSpace(statusMessage))
                {
                    <div class="alert alert-info mt-3" role="alert">
                        @statusMessage
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Classroom>? classrooms;
    private Classroom newClassroom = new();

    private string? statusMessage;

    protected override async Task OnInitializedAsync()
    {
        
            await LoadClassroomsAsync();
        
    }

    private async Task LoadClassroomsAsync()
    {
        classrooms = await ClassroomService.GetAllClassroomsAsync();
    }

    private async Task AddClassroomAsync()
    {
        statusMessage = string.Empty;

        if (await ClassroomService.ClassroomExistsAsync(newClassroom.RoomNumber))
        {
            statusMessage = "Classroom with this Room Number already exists.";
            return;
        }

        bool added = await ClassroomService.AddClassroomAsync(newClassroom);
        if (added)
        {
            statusMessage = "Classroom added successfully.";
            newClassroom = new();
            await LoadClassroomsAsync();
        }
        else
        {
            statusMessage = "Failed to add classroom.";
        }
    }

  
    private bool _initialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Inside on after render");
        if (firstRender && !_initialized)
        {
            Console.WriteLine("Initialized fun");
            _initialized = true;
            await UserState.InitializeAsync();
            StateHasChanged();

        }
    }

}
