@page "/register-course"
@using ClassroomReservationSystem.Components.Services;
@using ClassroomReservationSystem.Components.Models;
@using System.ComponentModel.DataAnnotations;
@inject CourseService CourseService
@inject UserState UserState
@rendermode InteractiveServer
<h3>Register New Course</h3>

@if (!UserState.IsAdmin)
{
    <p class="text-danger">Access Denied. Only admins can register courses.</p>
}
else
{
    <EditForm Model="@course" OnValidSubmit="HandleSubmit" formname="CourseRegistrationForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Course Code:</label>
            <InputText class="form-control" @bind-Value="course.CourseCode" />
            <ValidationMessage For="@(() => course.CourseCode)" />
        </div>

        <div class="mb-3">
            <label>Title:</label>
            <InputText class="form-control" @bind-Value="course.Title" />
            <ValidationMessage For="@(() => course.Title)" />
        </div>

        <div class="mb-3">
            <label>Pre-requisite Course Code (optional):</label>
            <InputText class="form-control" @bind-Value="course.PreReqCode" />
        </div>

        <button type="submit" class="btn btn-primary">Register Course</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="mt-3 alert @(isSuccess ? "alert-success" : "alert-danger")">
            @message
        </div>
    }
}

@code {
    private Course course = new();
    private string message = string.Empty;
    private bool isSuccess;

    private async Task HandleSubmit()
    {
        if (await CourseService.CourseCodeExistsAsync(course.CourseCode))
        {
            isSuccess = false;
            message = "Course code already exists.";
            return;
        }

        bool result = await CourseService.AddCourseAsync(course);
        if (result)
        {
            isSuccess = true;
            message = "Course registered successfully.";
            course = new(); // reset form
        }
        else
        {
            isSuccess = false;
            message = "Failed to register course.";
        }
    }

    private bool _initialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Inside on after render");
        if (firstRender && !_initialized)
        {
            Console.WriteLine("Initialized fun");
            _initialized = true;
            await UserState.InitializeAsync();
            StateHasChanged();
        }
    }
}
