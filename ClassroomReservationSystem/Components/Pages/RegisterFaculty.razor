@page "/register-faculty"
@using ClassroomReservationSystem.Components.Services
@using System.ComponentModel.DataAnnotations;
@inject UserService UserService
@inject NavigationManager Navigation
@inject UserState UserState
@rendermode InteractiveServer

<h3>Register New Faculty</h3>

@if (!UserState.IsAdmin)
{
    <p class="text-danger">Access Denied. Only admins can register new users.</p>
}
else
{
<EditForm Model="@facultyUser" OnValidSubmit="HandleRegister" formname="FacultyRegistrationForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Full Name:</label>
        <InputText class="form-control" @bind-Value="facultyUser.FullName" />
    </div>

    <div class="mb-3">
        <label>Username:</label>
        <InputText class="form-control" @bind-Value="facultyUser.UserName" />
        <ValidationMessage For="@(() => facultyUser.UserName)" />
    </div>

    <div class="mb-3">
        <label>Password:</label>
        <InputText class="form-control" @bind-Value="facultyUser.Password" type="password" />
    </div>

    <button class="btn btn-primary" type="submit">Register Faculty</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="mt-3 alert @(isSuccess ? "alert-success" : "alert-danger")">
        @message
    </div>
}
}


@code {
    private User facultyUser = new();
    private string message = string.Empty;
    private bool isSuccess;

    private async Task HandleRegister()
    {
        var result = await UserService.RegisterUserAsync(facultyUser, UserRole.Faculty);

        if (result)
        {
            isSuccess = true;
            message = "Faculty registered successfully.";
            facultyUser = new(); // Reset form
        }
        else
        {
            isSuccess = false;
            message = "Registration failed. Username may already exist.";
        }
    }
}