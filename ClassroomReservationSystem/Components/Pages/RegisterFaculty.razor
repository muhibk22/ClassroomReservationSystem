@page "/register-faculty"
@using ClassroomReservationSystem.Components.Services
@using System.ComponentModel.DataAnnotations;
@inject UserService UserService
@inject NavigationManager Navigation
@inject UserState UserState
@rendermode InteractiveServer

@if (!UserState.IsAdmin)
{
    <p class="text-danger">Access Denied. Only admins can register new users.</p>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h2 class="mb-4 text-center">Faculty Registration</h2>

                <EditForm Model="@facultyUser" OnValidSubmit="HandleRegister" formname="FacultyRegistrationForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <InputText class="form-control" @bind-Value="facultyUser.FullName" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <InputText class="form-control" @bind-Value="facultyUser.UserName" />
                        <ValidationMessage For="@(() => facultyUser.UserName)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText class="form-control" @bind-Value="facultyUser.Password" type="password" />
                    </div>

                    <button class="btn btn-primary w-100" type="submit">Register Faculty</button>
                </EditForm>
            </div>
        </div>
    </div>


@if (!string.IsNullOrEmpty(message))
{
    <div class="mt-3 alert @(isSuccess ? "alert-success" : "alert-danger")">
        @message
    </div>
}
}


@code {
    private User facultyUser = new();
    private string message = string.Empty;
    private bool isSuccess;

    private async Task HandleRegister()
    {
        var result = await UserService.RegisterUserAsync(facultyUser, UserRole.Faculty);

        if (result)
        {
            isSuccess = true;
            message = "Faculty registered successfully.";
            facultyUser = new(); // Reset form
        }
        else
        {
            isSuccess = false;
            message = "Registration failed. Username may already exist.";
        }
    }
    private bool _initialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Inside on after render");
        if (firstRender && !_initialized)
        {
            Console.WriteLine("Initialized fun");
            _initialized = true;
            await UserState.InitializeAsync();
            StateHasChanged(); 
        }
    }
}